# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

pool:
  vmImage: 'ubuntu-latest'

resources:
  containers:
  - container: mongodb
    image: mongo:4.2.0
    ports:
    - 27017-27019:27017-27019

# container:
services:
  mongo: mongodb

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  # GOROOT: '/usr/local/go1.11'
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  projectName: 'InfoPortal' # name of the project(service name for Devops)
  DevOpsToken: 'SIa9vnROjthsY_z93TDMPk3xt6CttgCqLAP_eabPsv9jXu1LJZ_FD8xhKe98yRMC' # service token for Devops Intelligence
  # PATH: '$GOPATH/bin'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

# - script: |
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'


- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
    curl http://localhost:27017

    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: "Setup Go Workspace"

- script: |
    go version
    go get github.com/jstemmer/go-junit-report
    go test -v ./... 2>&1 | go-junit-report > report.xml
    echo The file generated is ...
    pwd report.xml
    echo The file contents are ...
    cat report.xml
    curl --location --request POST 'https://dev-dash-commander-demo.multicloud-ibm.com/dash/api/test/v1/services/'$(projectName)'/tests/unit/run/5d8b192ac11e8a01f1493f11?fileType=xunit&testEngine=XUNIT' \
      --header 'Content-Type: multipart/form-data' \
      --header 'Authorization: TOKEN '$(DevOpsToken)'' \
      --form 'uploadfile=@"report.xml"' -k
  workingDirectory: '$(modulePath)'
  displayName: "Run JUnit Reporting"

# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: '*.xml'
    # script: |
      
